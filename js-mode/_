# --
_.`(yas-choose-value '(
"chunk(array, [size=1])"
"compact(array)"
"concat(array, [values])"
"difference(array, [values])"
"differenceBy(array, [values], [iteratee=_.identity])"
"differenceWith(array, [values], [comparator])"
"drop(array, [n=1])"
"dropRight(array, [n=1])"
"dropRightWhile(array, [predicate=_.identity])"
"dropWhile(array, [predicate=_.identity])"
"fill(array, value, [start=0], [end=array.length])"
"findIndex(array, [predicate=_.identity], [fromIndex=0])"
"findLastIndex(array, [predicate=_.identity], [fromIndex=array.length-1])"
"flatten(array)"
"flattenDeep(array)"
"flattenDepth(array, [depth=1])"
"fromPairs(pairs)"
"head(array)"
"indexOf(array, value, [fromIndex=0])"
"initial(array)"
"intersection([arrays])"
"intersectionBy([arrays], [iteratee=_.identity])"
"intersectionWith([arrays], [comparator])"
"join(array, [separator=','])"
"last(array)"
"lastIndexOf(array, value, [fromIndex=array.length-1])"
"nth(array, [n=0])"
"pull(array, [values])"
"pullAll(array, values)"
"pullAllBy(array, values, [iteratee=_.identity])"
"pullAllWith(array, values, [comparator])"
"pullAt(array, [indexes])"
"remove(array, [predicate=_.identity])"
"reverse(array)"
"slice(array, [start=0], [end=array.length])"
"sortedIndex(array, value)"
"sortedIndexBy(array, value, [iteratee=_.identity])"
"sortedIndexOf(array, value)"
"sortedLastIndex(array, value)"
"sortedLastIndexBy(array, value, [iteratee=_.identity])"
"sortedLastIndexOf(array, value)"
"sortedUniq(array)"
"sortedUniqBy(array, [iteratee])"
"tail(array)"
"take(array, [n=1])"
"takeRight(array, [n=1])"
"takeRightWhile(array, [predicate=_.identity])"
"takeWhile(array, [predicate=_.identity])"
"union([arrays])"
"unionBy([arrays], [iteratee=_.identity])"
"unionWith([arrays], [comparator])"
"uniq(array)"
"uniqBy(array, [iteratee=_.identity])"
"uniqWith(array, [comparator])"
"unzip(array)"
"unzipWith(array, [iteratee=_.identity])"
"without(array, [values])"
"xor([arrays])"
"xorBy([arrays], [iteratee=_.identity])"
"xorWith([arrays], [comparator])"
"zip([arrays])"
"zipObject([props=[]], [values=[]])"
"zipObjectDeep([props=[]], [values=[]])"
"zipWith([arrays], [iteratee=_.identity])"
"countBy(collection, [iteratee=_.identity])"
"every(collection, [predicate=_.identity])"
"filter(collection, [predicate=_.identity])"
"find(collection, [predicate=_.identity], [fromIndex=0])"
"findLast(collection, [predicate=_.identity], [fromIndex=collection.length-1])"
"flatMap(collection, [iteratee=_.identity])"
"flatMapDeep(collection, [iteratee=_.identity])"
"flatMapDepth(collection, [iteratee=_.identity], [depth=1])"
"forEach(collection, [iteratee=_.identity])"
"forEachRight(collection, [iteratee=_.identity])"
"groupBy(collection, [iteratee=_.identity])"
"includes(collection, value, [fromIndex=0])"
"invokeMap(collection, path, [args])"
"keyBy(collection, [iteratee=_.identity])"
"map(collection, [iteratee=_.identity])"
"orderBy(collection, [iteratees=[_.identity]], [orders])"
"partition(collection, [predicate=_.identity])"
"reduce(collection, [iteratee=_.identity], [accumulator])"
"reduceRight(collection, [iteratee=_.identity], [accumulator])"
"reject(collection, [predicate=_.identity])"
"sample(collection)"
"sampleSize(collection, [n=1])"
"shuffle(collection)"
"size(collection)"
"some(collection, [predicate=_.identity])"
"sortBy(collection, [iteratees=[_.identity]])"
"now()"
"after(n, func)"
"ary(func, [n=func.length])"
"before(n, func)"
"bind(func, thisArg, [partials])"
"bindKey(object, key, [partials])"
"curry(func, [arity=func.length])"
"curryRight(func, [arity=func.length])"
"debounce(func, [wait=0], [options={}])"
"defer(func, [args])"
"delay(func, wait, [args])"
"flip(func)"
"memoize(func, [resolver])"
"negate(predicate)"
"once(func)"
"overArgs(func, [transforms=[_.identity]])"
"partial(func, [partials])"
"partialRight(func, [partials])"
"rearg(func, indexes)"
"rest(func, [start=func.length-1])"
"spread(func, [start=0])"
"throttle(func, [wait=0], [options={}])"
"unary(func)"
"wrap(value, [wrapper=identity])"
"castArray(value)"
"clone(value)"
"cloneDeep(value)"
"cloneDeepWith(value, [customizer])"
"cloneWith(value, [customizer])"
"conformsTo(object, source)"
"eq(value, other)"
"gt(value, other)"
"gte(value, other)"
"isArguments(value)"
"isArray(value)"
"isArrayBuffer(value)"
"isArrayLike(value)"
"isArrayLikeObject(value)"
"isBoolean(value)"
"isBuffer(value)"
"isDate(value)"
"isElement(value)"
"isEmpty(value)"
"isEqual(value, other)"
"isEqualWith(value, other, [customizer])"
"isError(value)"
"isFinite(value)"
"isFunction(value)"
"isInteger(value)"
"isLength(value)"
"isMap(value)"
"isMatch(object, source)"
"isMatchWith(object, source, [customizer])"
"isNaN(value)"
"isNative(value)"
"isNil(value)"
"isNull(value)"
"isNumber(value)"
"isObject(value)"
"isObjectLike(value)"
"isPlainObject(value)"
"isRegExp(value)"
"isSafeInteger(value)"
"isSet(value)"
"isString(value)"
"isSymbol(value)"
"isTypedArray(value)"
"isUndefined(value)"
"isWeakMap(value)"
"isWeakSet(value)"
"lt(value, other)"
"lte(value, other)"
"toArray(value)"
"toFinite(value)"
"toInteger(value)"
"toLength(value)"
"toNumber(value)"
"toPlainObject(value)"
"toSafeInteger(value)"
"toString(value)"
"add(augend, addend)"
"ceil(number, [precision=0])"
"divide(dividend, divisor)"
"floor(number, [precision=0])"
"max(array)"
"maxBy(array, [iteratee=_.identity])"
"mean(array)"
"meanBy(array, [iteratee=_.identity])"
"min(array)"
"minBy(array, [iteratee=_.identity])"
"multiply(multiplier, multiplicand)"
"round(number, [precision=0])"
"subtract(minuend, subtrahend)"
"sum(array)"
"sumBy(array, [iteratee=_.identity])"
"clamp(number, [lower], upper)"
"inRange(number, [start=0], end)"
"random([lower=0], [upper=1], [floating])"
"assign(object, [sources])"
"assignIn(object, [sources])"
"assignInWith(object, sources, [customizer])"
"assignWith(object, sources, [customizer])"
"at(object, [paths])"
"create(prototype, [properties])"
"defaults(object, [sources])"
"defaultsDeep(object, [sources])"
"findKey(object, [predicate=_.identity])"
"findLastKey(object, [predicate=_.identity])"
"forIn(object, [iteratee=_.identity])"
"forInRight(object, [iteratee=_.identity])"
"forOwn(object, [iteratee=_.identity])"
"forOwnRight(object, [iteratee=_.identity])"
"functions(object)"
"functionsIn(object)"
"get(object, path, [defaultValue])"
"has(object, path)"
"hasIn(object, path)"
"invert(object)"
"invertBy(object, [iteratee=_.identity])"
"invoke(object, path, [args])"
"keys(object)"
"keysIn(object)"
"mapKeys(object, [iteratee=_.identity])"
"mapValues(object, [iteratee=_.identity])"
"merge(object, [sources])"
"mergeWith(object, sources, customizer)"
"omit(object, [paths])"
"omitBy(object, [predicate=_.identity])"
"pick(object, [paths])"
"pickBy(object, [predicate=_.identity])"
"result(object, path, [defaultValue])"
"set(object, path, value)"
"setWith(object, path, value, [customizer])"
"toPairs(object)"
"toPairsIn(object)"
"transform(object, [iteratee=_.identity], [accumulator])"
"unset(object, path)"
"update(object, path, updater)"
"updateWith(object, path, updater, [customizer])"
"values(object)"
"valuesIn(object)"
"camelCase([string=''])"
"capitalize([string=''])"
"deburr([string=''])"
"endsWith([string=''], [target], [position=string.length])"
"escape([string=''])"
"escapeRegExp([string=''])"
"kebabCase([string=''])"
"lowerCase([string=''])"
"lowerFirst([string=''])"
"pad([string=''], [length=0], [chars=' '])"
"padEnd([string=''], [length=0], [chars=' '])"
"padStart([string=''], [length=0], [chars=' '])"
"parseInt(string, [radix=10])"
"repeat([string=''], [n=1])"
"replace([string=''], pattern, replacement)"
"snakeCase([string=''])"
"split([string=''], separator, [limit])"
"startCase([string=''])"
"startsWith([string=''], [target], [position=0])"
"template([string=''], [options={}])"
"toLower([string=''])"
"toUpper([string=''])"
"trim([string=''], [chars=whitespace])"
"trimEnd([string=''], [chars=whitespace])"
"trimStart([string=''], [chars=whitespace])"
"truncate([string=''], [options={}])"
"unescape([string=''])"
"upperCase([string=''])"
"upperFirst([string=''])"
"words([string=''], [pattern])"
"attempt(func, [args])"
"bindAll(object, methodNames)"
"cond(pairs)"
"conforms(source)"
"constant(value)"
"defaultTo(value, defaultValue)"
"flow([funcs])"
"flowRight([funcs])"
"identity(value)"
"iteratee([func=_.identity])"
"matches(source)"
"matchesProperty(path, srcValue)"
"method(path, [args])"
"methodOf(object, [args])"
"mixin([object=lodash], source, [options={}])"
"noConflict()"
"noop()"
"nthArg([n=0])"
"over([iteratees=[_.identity]])"
"overEvery([predicates=[_.identity]])"
"overSome([predicates=[_.identity]])"
"property(path)"
"propertyOf(object)"
"range([start=0], end, [step=1])"
"rangeRight([start=0], end, [step=1])"
"runInContext([context=root])"
"stubArray()"
"stubFalse()"
"stubObject()"
"stubString()"
"stubTrue()"
"times(n, [iteratee=_.identity])"
"toPath(value)"
"uniqueId([prefix=''])"
"templateSettings"
))`